install.packages("recommenderlab")
library(recommenderlab)
data("MovieLense")
MovieLense
print(MovieLense)
as(MovieLense,"data.frame")
head(as(MovieLense,"data.frame"))
?colCounts
show(MovieLense)
?MovieLense
rowCounts(MovieLense)
plot(rowMeans(MovieLense))
plot(rowCounts(MovieLense))
plot(rowCounts(MovieLense),type="l")
?evaluate
?evaluate
??evaluate
library(recommenderlab)
install.packages("recommenderlab")
library(recommenderlab)
?evaluation
?evaluate
### evaluate top-N list recommendations on a 0-1 data set
data("MSWeb")
MSWeb10 <- sample(MSWeb[rowCounts(MSWeb) >10,], 20)
## create an evaluation scheme
es <- evaluationScheme(MSWeb10, method="cross-validation",
k=4, given=3)
## run evaluation
ev <- evaluate(es, "POPULAR", n=c(1,3,5,10))
ev
## look at the results (by the length of the topNList)
avg(ev)
plot(ev, annotate = TRUE)
## now run evaluate with a list
algorithms <- list(
RANDOM = list(name = "RANDOM", param = NULL),
POPULAR = list(name = "POPULAR", param = NULL)
)
evlist <- evaluate(es, algorithms, n=c(1,3,5,10))
plot(evlist, legend="topright")
## select the first results
evlist[[1]]
### Evaluate using a data set with real-valued ratings
data("Jester5k")
es <- evaluationScheme(Jester5k[1:25], method="cross-validation",
k=4, given=10, goodRating=5)
## Note: goodRating is used to determine positive ratings
## predict top-N recommendation lists
ev <- evaluate(es, "RANDOM", type="topNList", n=10)
avg(ev)
## predict missing ratings
ev <- evaluate(es, "RANDOM", type="ratings")
avg(ev)
evlist
str(evlist)
ev
print(ev)
show(ev)
attributes(ev)
ev <- evaluate(es, "RANDOM", type="topNList", n=10)
avg(ev)
